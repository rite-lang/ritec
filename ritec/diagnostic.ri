//! A module for creating and printing diagnostic messages.

import std:io
import std:list
import std:math
import std:result:Result
import std:string

import span:Sources
import span:Span

pub import report
pub import ansi

/// A diagnostic message.
pub type Diagnostic(
  /// The severity of the diagnostic message.
  severity: Severity

  /// The code associated with the diagnostic message.
  code:     str

  /// The main message of the diagnostic.
  message:  str

  /// A list of labels attached to the diagnostic message.
  labels:   [Label]  
)

/// The severity of a diagnostic message.
pub type Severity =
  /// A fatal error.
  | Error

  /// A non-fatal warning.
  | Warning 

  /// A helpful message.
  | Help

/// A label attached to a diagnostic message.
pub type Label(
  /// The message of the label.
  message:  str

  /// The span of the label.
  span:     Span
)

/// Create a new diagnostic message.
pub fn new(
  severity: Severity
  code:     str
  message:  str
) -> Diagnostic
  Diagnostic(
    severity: severity
    code:     code
    labels:   []
    message:  message
  )

/// Add a label to a diagnostic message.
pub fn add_label(
  diagnostic: Diagnostic
  message:    str
  span:       Span
) -> Diagnostic
  let labels = diagnostic.labels
    |> list:append(Label(message, span))

  Diagnostic(labels: labels, ..diagnostic)

/// Add a span to a diagnostic message.
///
/// This is a convenience function for adding a label with an empty message.
pub fn add_span(
  diagnostic: Diagnostic
  span:       Span
) -> Diagnostic
  add_label(diagnostic, "", span)

/// Print a diagnostic message to the console.
///
/// This assumes that the all source files mentioned in the diagnostic
/// are available in the `sources` argument.
///
/// An example of the output:
///
/// ```plaintext
/// error[E0001]: this is an error message
///  --> path/to/file.rite:1:2:3
///   |
/// 1 |   let x: int = []
///   |   ^^^^^^^^^^^^^^^ expected `int`, found `[_]`
/// ```
pub fn print(diagnostic: Diagnostic, sources: Sources) -> void
  let Diagnostic(severity, code, message, labels) = diagnostic

  let severity_str = severity_str(severity)
  let severity_color = severity_color(severity)

  // first print the main message of the diagnostic e.g.
  //
  // error[E0001]: this is an error message
  //
  let severity_code = f"{severity_str}[{code}]"
    |> ansi:color(severity_color)
    |> ansi:bold
  io:println(f"{severity_code}: {ansi:bold(message)}")

  labels |> list:each(|label| print_label(label, severity, sources))

/// Print a label to the console.
///
/// This assumes that the source file mentioned in the labels span is available
/// in the `sources` argument.
///
/// An example of the output:
///
/// ```plaintext
///  --> path/to/file.rite:1:3
///   |
/// 1 |   let x: int = []
///   |   ^^^^^^^^^^^^^^^ expected `int`, found `[_]`
/// ```
pub fn print_label(label: Label, severity: Severity, sources: Sources) -> void 
  let Label(message, span) = label

  let assert Ok(source) = span:get_source(sources, span.source)

  // get the lines that the label spans
  let lines = get_lines(source.text, span.lo, span.hi)

  // we only really care about the first and last lines
  let assert Ok(first) = list:first(lines)
  let assert Ok(last) = list:last(lines)

  // compute the number of spaces needed to align the source span
  // this is dependent on the number of digits in the line numbers
  let space_count = string:length(f"{last.number + 1}") + 1
  let first_spaces = space_count - string:length(f"{first.number + 1}")

  // print the source span and the line that the label spans
  //
  //  --> path/to/file.rite:1:3
  //
  let space = string:repeat(" ", space_count - 1)
  let column = (span.lo - first.lo) + 1
  let source_span = f"{source.path}:{first.number + 1}:{column}"
  io:println(f"{space}{ansi:blue("-->")} {source_span}")

  // print a padding line before the source span
  //
  //   |
  //
  let space = string:repeat(" ", space_count)

  f"{space}|"
  |> ansi:blue
  |> io:println

  // print the first line of the label span
  //
  // 1 |   let x: int = [] 
  //
  let space = string:repeat(" ", first_spaces)
  let number = f"{first.number + 1}{space}|"
    |> ansi:blue

  f"{number} {first.text}"
  |> io:println

  // compute the number of spaces needed to align the marker
  // as well as the length of the marker
  let marker_space_count = span.lo - first.lo
  let marker_length = span.hi
    |> math:min(first.hi)
    |> math:sub(span.lo)
    |> math:max(1)

  // print the marker and message
  //
  //   |   ^^^^^^^^^^^^^^^ expected `int`, found `[]`
  //
  let marker = string:repeat("^", marker_length)
  let marker_space = string:repeat(" ", marker_space_count)
  let space = string:repeat(" ", space_count)
  let label = f"{marker} {message}"
    |> ansi:color(severity_color(severity))
    |> ansi:bold

  f"{space}{ansi:blue("|")} {marker_space}{label}"
  |> io:println

type Line(
  number: int
  lo:     int
  hi:     int
  text:   str
)

// get the lines that `lo` and `hi` span in `text`
fn get_lines(text, lo, hi)
  mut offset = 0

  string:lines(text) 
    |> list:enumerate
    |> list:filter_map(|pair|
      let number, line = pair

      let line_lo = offset
      let line_hi = offset + string:length(line)

      let line = match line_lo <= hi && lo <= line_hi
        | true  -> Ok(Line(number, line_lo, line_hi, line))
        | false -> Err(void)

      // we add 1 to the offset to account for the newline character
      offset = line_hi + 1

      line
    )

fn severity_str(severity)
  match severity
  | Error   -> "error"
  | Help    -> "help"
  | Warning -> "warning"

fn severity_color(severity)
  match severity
  | Error   -> ansi:Red
  | Help    -> ansi:Green
  | Warning -> ansi:Yellow
