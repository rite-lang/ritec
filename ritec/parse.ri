pub import token
pub import lexer
pub import item
pub import expr
pub import ty

import std:result:Result

import ritec:ast
import ritec:diagnostic
import ritec:diagnostic:Diagnostic
import ritec:diagnostic:Severity
import ritec:span
import ritec:span:Span

import token:TokenTree
import token:TokenStream

/// Parse an entire token stream into a module
pub fn parse(
  stream: TokenStream
) -> Result<ast:Module * TokenStream, Diagnostic>
  let span = stream.span
  let mod_comments, stream = item:parse_mod_doc_comments(stream)?
  let items, stream = item:parse_items(stream, [])?
  Ok((ast:Module(span:join(span, stream.span), mod_comments, items), stream))

/// Shared function for parsing a path expression
/// `path` is a sequence of identifiers separated by `:`
pub fn parse_path(
  stream: TokenStream
) -> Result<ast:Path * TokenStream, Diagnostic>
  let token, span, stream = token:next(stream)

  match token
  | Snake(name) -> Ok((ast:Path:Path(span, [name]), stream))
  | Pascal(name) -> Ok((ast:Path:Path(span, [name]), stream))
  | Path(segments) -> Ok((ast:Path:Path(span, segments), stream))
  | token ->
    diagnostic:new(
      severity: Error
      code:     "expected:path"
      message:  f"expected path, found `{token:format(token)}`"
    )
    |> diagnostic:add_label("here", span)
    |> Err

/// Shared function for parsing a snake case identifier
pub fn parse_snake(
  stream: TokenStream
) -> Result<str * Span * TokenStream, Diagnostic>
  let token, span, stream = token:next(stream)

  match token
  | Snake(name) -> Ok((name, span, stream))
  | token ->
    diagnostic:new(
      severity: Error
      code:     "expected:snake"
      message:  f"expected snake, found `{token:format(token)}`"
    )
    |> diagnostic:add_label("here", span)
    |> Err

/// Parse a pascal case identifier
pub fn parse_pascal(
  stream: TokenStream
) -> Result<str * Span * TokenStream, Diagnostic>
  let token, span, stream = token:next(stream)

  match token
  | Pascal(name) -> Ok((name, span, stream))
  | token ->
    diagnostic:new(
      severity: Error
      code:     "expected:pascal"
      message:  f"expected pascal, found `{token:format(token)}`"
    )
    |> diagnostic:add_label("here", span)
    |> Err
