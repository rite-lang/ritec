import std:dict
import std:dict:Dict
import std:result:Result

import ritec:span:Span
import ritec:number:IntKind
import ritec:number:FloatKind

pub type Part =
  | Void
  | Bool
  | List
  | Tuple
  | Func
  | Str
  | Ref
  | Int(kind: IntKind)
  | Adt(id: int)
  | Generic(
    index: int
    func:  int
  )

pub type Ty =
  | Infer(
    span:  Span
    bound: Result<Bound, void>
    id:    int
    func:  int
  )
  | Partial(
    span: Span
    part: Part
    args: [Ty]
  )
  | Field(
    span: Span
    base: Ty
    name: str
  )
  | Tuple(
    span:  Span
    base:  Ty
    index: int
  )
  | Call(
    span: Span
    func: Ty
    args: [Result<Ty, void>]
  )
  | Pipe(
    span:  Span
    input: Ty
    func:  Ty
    args:  [Result<Ty, void>]
  )

pub type Bound =
  | Unsigned
  | Signed
  | Float

pub fn new_void(span: Span) -> Ty
  Partial(
    span: span
    part: Void
    args: []
  )

pub type Env(
  next:          int
  constraints:   [Constraint]
  substitutions: Dict<Ty, Ty>
)

pub type Constraint(
  span: Span
  lhs:  Ty
  rhs:  Ty
)

pub fn env() -> Env
  Env(
    next:          0
    constraints:   []
    substitutions: dict:new()
  )

pub fn unify(
  env:  Env
  span: Span
  lhs:  Ty
  rhs:  Ty
) -> Env
  mut env = env

  let constraint = Constraint(
    span: span
    lhs:  lhs
    rhs:  rhs
  )

  env.constraints = [constraint, ..env.constraints]
  env

pub fn infer(
  env:   Env
  span:  Span
  bound: Result<Bound, void>
  func:  int
) -> Ty * Env
  mut env = env

  let id   = env.next
  env.next = env.next + 1

  let ty = Infer(
    span:  span
    bound: bound
    id:    id
    func:  func
  )

  ty, env
