pub import span
pub import parse
pub import diagnostic

import std:result:Result

import diagnostic:report

fn main(args: [str])
  let sources = span:new_sources()
  let assert Ok(source) = span:load_source("ritec/parse/lexer.ri")
  let sources, id = span:add_source(sources, source)

  match run(source.text, id)
  | Ok(_) -> void
  | Err(report) -> diagnostic:report:print(report, sources)

fn run(text, id)
  let stream = parse:lexer:lex(id, text)?

  let ast, _ = report:map(parse:parse(stream))?

  let module = hir:Module:Module(
    attrs:   ast.attrs
    name:    "lexer"
    imports: std:dict:new()
  )

  let unit = hir:new()
  let unit, id = hir:add_module(unit, module)

  let unit = report:map(lower:register_module(unit, id, ast))?

  std:debug:print(unit)

  Ok(void)
