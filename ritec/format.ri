//! Format ast back to source code.
import std:list
import std:string
import std:array
import std:result:Result

import ritec:attribute:Attribute

import ast:Expr
import ast:Ty

pub type Formatter(
  depth: int
  indent: int
  tuple_lvl: int
)

fn inc(
  fmt: Formatter
) -> Formatter
  Formatter(fmt.depth + 1, ..fmt)

fn inc_tuple_lvl(
  fmt: Formatter
) -> Formatter
  Formatter(fmt.tuple_lvl + 1, ..fmt)

fn indent_spaces(fmt: Formatter) -> str
  string:repeat(string:repeat(" ", fmt.indent), fmt.depth)

fn indent_line(fmt: Formatter, line: str) -> str
  f"{indent_spaces(fmt)}{line}"

fn indent_multiline(fmt: Formatter, lines: [str]) -> str
  string:join(list:map(lines, indent_line(fmt)), newline())

fn char(c: u8) -> str
  string:from_bytes(array:from_list([c]))

fn quote() -> str
  char(34)

fn newline() -> str
  char(10)

fn open_brace() -> str
  char(123)

fn close_brace() -> str
  char(125)

pub fn format(module: ast:Module) -> str
  let fmt = Formatter(
    depth: 0
    indent: 2
    tuple_lvl: 0
  )

  format_module(fmt, module)

pub fn format_module(
  fmt:    Formatter
  module: ast:Module
) -> str
  let attrs = module.attrs
    |> list:map(format_decorator(fmt))
    |> string:join(newline())

  let items = module.items
    |> list:map(format_item(fmt))
    |> string:join(string:repeat(newline(), 2))

  f"{attrs}{items}"

fn format_item(
  fmt:  Formatter
  item: ast:Item
) -> str
  match item
  | ast:Item:Import(imp) -> format_import(fmt, imp)
  | ast:Item:Func(func) -> format_func(fmt, func)
  | ast:Item:Type(ty) -> format_type(fmt, ty)

fn format_import(
  fmt: Formatter
  imp: ast:Import
) -> str
  f"{format_vis(fmt, imp.vis)}import {format_path(fmt, imp.path)}"

fn format_type(
  fmt: Formatter
  ty:  ast:Type
) -> str
  match ty
  | ast:Type:Adt(adt) -> format_type_adt(fmt, adt)
  | ast:Type:Single(single) -> format_type_single(fmt, single)

fn format_type_single(
  fmt: Formatter
  ty:  ast:Single
) -> str
  let attrs = format_attrs(fmt, ty.attrs)
  let vis = format_vis(fmt, ty.vis)
  let name = ty.name

  let generics = match ty.generics
    | Ok(generics) -> f"<{string:join(generics, ", ")}>"
    | Err(_) -> ""

  let fields = format_fields(fmt, ty.fields)
  f"{attrs}{vis}type {name}{generics}{fields}"

fn format_type_adt(
  fmt: Formatter
  ty:  ast:Adt
) -> str
  let attrs = format_attrs(fmt, ty.attrs)
  let vis = format_vis(fmt, ty.vis)
  let name = ty.name
  let generics = match ty.generics
    | Ok(generics) -> f"<{string:join(generics, ", ")}>"
    | Err(_) -> ""

  let variants = match ty.variants
    | [] -> ""
    | _ ->
      ty.variants
      |> list:map(format_type_variant(inc(fmt)))
      |> indent_multiline(inc(fmt), _)
      |> string:concat(f" = {newline()}", _)

  f"{attrs}{vis}type {name}{generics}{variants}"

fn format_type_variant(
  fmt:     Formatter
  variant: ast:Variant
) -> str
  let name = variant.name
  let fields = format_fields(fmt, variant.fields)
  f"| {name}{fields}"

fn format_fields(
  fmt:    Formatter
  fields: ast:Fields
) -> str
  match fields.fields
  | [] -> ""
  | _ ->
    let fields = match fields.multi
      | true ->
        let fields = list:map(fields.fields, format_field(fmt))
        let fields = indent_multiline(inc(fmt), fields)
        f"{newline()}{fields}{newline()}{indent_spaces(fmt)}"
      | false -> string:join(list:map(fields.fields, format_field(fmt)), ", ")
    f"({fields})"

fn format_field(
  fmt:   Formatter
  field: ast:Field
) -> str
  let attrs = format_attrs(fmt, field.attrs)

  let name = field.name
  let ty = match field.ty
    | Ok(ty) -> f": {format_ty(fmt, ty)}"
    | Err(_) -> ""

  f"{attrs}{name}{ty}"

fn format_func(
  fmt:  Formatter
  func: ast:Func
) -> str
  let attrs = format_attrs(fmt, func.attrs)
  let vis = format_vis(fmt, func.vis)
  let name = func.name

  let args = list:map(func.input.args, format_argument(fmt))

  let args = match func.input.multi
    | true ->
      let args = indent_multiline(inc(fmt), args)
      f"{newline()}{args}{newline()}{indent_spaces(fmt)}"
    | false -> string:join(args, ", ")

  let output = match func.output
    | Ok(ty) -> f" -> {format_ty(fmt, ty)}"
    | Err(_) -> ""

  let body = match func.body
    | Ok(expr) -> f"{format_expr(fmt, expr)}"
    | Err(_) -> newline()

  f"{attrs}{vis}fn {name}({args}){output}{body}"

fn format_vis(
  fmt: Formatter
  vis: ast:Vis
) -> str
  match vis
  | ast:Vis:Public -> "pub "
  | ast:Vis:Private -> ""

fn format_attrs(
  fmt:        Formatter
  attrs: [Attribute]
) -> str
  list:map(attrs, format_decorator(fmt))
  |> list:map(string:concat(_, newline()))
  |> string:join("")

fn format_decorator(
  fmt:       Formatter
  decorator: Attribute
) -> str
  mut s = ""

  match decorator.name == "moddoc"
  | true -> s = f"//!{string:join(decorator.args, "")}"
  | false -> void

  match decorator.name == "doc"
  | true -> s = f"///{string:join(decorator.args, "")}"
  | false -> void

  match s == ""
  | true ->
    let args = list:map(decorator.args, |x| f"{quote()}{x}{quote()}")
    let args = string:join(args, ", ")
    s = f"#[{decorator.name}({args})]"
  | false -> void

  indent_line(fmt, s)

fn format_path(
  fmt:  Formatter
  path: ast:Path
) -> str
  string:join(path.segments, ":")

fn format_ty(
  fmt: Formatter
  ty: ast:Ty
) -> str
  match ty
  | ast:Ty:Infer(_) -> "_"
  | ast:Ty:Void(_) -> "void"
  | ast:Ty:Bool(_) -> "bool"
  | ast:Ty:Int(_, kind) -> format_ty_int(fmt, kind)
  | ast:Ty:Str(_) -> "str"
  | ast:Ty:Ref(_, ty) -> f"&{format_ty(fmt, ty)}"
  | ast:Ty:Tuple(_, tys) ->
    tys
    |> list:map(format_ty(fmt))
    |> string:join(" * ")
  | ast:Ty:List(_, ty) -> f"[{format_ty(fmt, ty)}]"
  | ast:Ty:Generic(_, name) -> f"'{name}"
  | ast:Ty:Func(_, input, output) ->
    let input = string:join(list:map(input, format_ty(fmt)), ", ")
    let output = match output
      | Ok(ty) -> format_ty(fmt, ty)
      | Err(_) -> "void"
    f"fn({input}) -> {output}"
  | ast:Ty:Path(_, path, generics) ->
    let generics = match generics
      | Ok(tys) -> f"<{string:join(list:map(tys, format_ty(fmt)), ", ")}>"
      | Err(_) -> ""
    f"{format_path(fmt, path)}{generics}"

fn format_ty_int(
  fmt:  Formatter
  kind: number:IntKind
) -> str
  match kind
  | number:IntKind:U8  -> "u8"
  | number:IntKind:U16 -> "u16"
  | number:IntKind:U32 -> "u32"
  | number:IntKind:U64 -> "u64"
  | number:IntKind:I8  -> "i8"
  | number:IntKind:I16 -> "i16"
  | number:IntKind:I32 -> "i32"
  | number:IntKind:I64 -> "i64"
  | number:IntKind:Int -> "int"

fn format_expr(
  fmt:  Formatter
  expr: ast:Expr
) -> str
  match expr
  | ast:Expr:Void(_) -> "void"
  | ast:Expr:Bool(_, value) -> 
    match value
    | true -> "true"
    | false -> "false"
  | ast:Expr:Int(_, value) -> f"{value}"
  | ast:Expr:String(_, value) -> f"{quote()}{value}{quote()}"
  | ast:Expr:Format(_, start, formats) ->
    let formats = formats
      |> list:map(|pair: ast:Format * str|
        let format, string = pair
        f"{open_brace()}{format_expr(fmt, format.expr)}{close_brace()}{string}"
      )
      |> string:join("")

    f"{quote()}{start}{formats}{quote()}"
  | ast:Expr:Paren(_, expr) -> f"({format_expr(fmt, expr)})"
  | ast:Expr:Tuple(_, exprs) ->
    let s = f"{string:join(list:map(exprs, format_expr(inc_tuple_lvl(fmt))), ", ")}"
    match fmt.tuple_lvl == 0
    | false -> f"({s})"
    | true -> s
  | ast:Expr:Path(_, path) -> format_path(fmt, path)
  | ast:Expr:List(_, head, tail) ->
    let head = string:join(list:map(head, format_expr(fmt)), ", ")
    let tail = match tail
      | Ok(expr) -> f", ..{format_expr(fmt, expr)}"
      | Err(_) -> ""
    f"[{head}{tail}]"
  | ast:Expr:Block(_, items) ->
    let fmt = inc(fmt)

    items
    |> list:map(|item| 
      match item
      | ast:BlockItem:Newline(_) -> newline()
      | ast:BlockItem:Comment(_, text) -> 
        let comment = indent_line(fmt, f"//{text}")
        f"{newline()}{comment}"
      | ast:BlockItem:Expr(expr, _) -> 
        let expr = format_expr(fmt, expr)
        f"{newline()}{indent_spaces(fmt)}{expr}"
    )
    |> string:join("")
  | ast:Expr:As(_, expr, ty) -> f"{format_expr(fmt, expr)} as {format_ty(fmt, ty)}"
  | ast:Expr:Field(_, expr, name) -> f"{format_expr(fmt, expr)}.{name}"
  | ast:Expr:Call(_, expr, args, multi, spread) ->
    let args = args |> list:map(format_call_arg(fmt))

    let args = match spread
      | Ok(expr) -> list:append(args, f"..{format_expr(fmt, expr)}")
      | Err(_) -> args

    match multi
    | true -> 
      let args = indent_multiline(inc(fmt), args)
      let args = f"{newline()}{args}{newline()}{indent_spaces(fmt)}"
      f"{format_expr(fmt, expr)}({args})"
    | false ->
      let args = string:join(args, ", ")

      match list:any(string:graphemes(args), |c| c == newline())
      | true -> f"{format_expr(fmt, expr)}({args}{newline()}{indent_spaces(fmt)})"
      | false -> f"{format_expr(fmt, expr)}({args})"
  | ast:Expr:Pipe(_, expr, funcs, multi) ->
    match multi
    | true ->
      let funcs = list:map(funcs, format_expr(fmt))
        |> list:map(string:concat("|> ", _))
        |> list:map(indent_line(fmt, _))
        |> list:map(string:concat(_, newline()))
        |> string:join("")

      f"{format_expr(fmt, expr)}{newline()}{funcs}"
    | false ->
      let funcs = list:map(funcs, format_expr(fmt))
        |> list:map(string:concat(" |> ", _))
        |> string:join("")

      f"{format_expr(fmt, expr)}{funcs}"
  | ast:Expr:Binary(_, lhs, op, rhs) ->
    f"{format_expr(fmt, lhs)} {format_bin_op(fmt, op)} {format_expr(fmt, rhs)}"
  | ast:Expr:Unary(_, op, expr) ->
    f"{format_un_op(fmt, op)}{format_expr(fmt, expr)}"
  | ast:Expr:Let(_, is_assert, pat, ty, expr) ->
    let is_assert = match is_assert
      | true -> "assert "
      | false -> ""
    let ty = match ty
      | Ok(ty) -> f": {format_ty(fmt, ty)}"
      | Err(_) -> ""

    // some blocks need an additional indent here
    let efmt = match expr
      | ast:Expr:Match(_, _, _) -> inc(fmt)
      | ast:Expr:Pipe(_, _, _, true) -> inc(fmt)
      | _ -> fmt

    f"let {is_assert}{format_pat(fmt, pat)}{ty} = {format_expr(efmt, expr)}"
  | ast:Expr:Mut(_, name, ty, expr) ->
    let ty = match ty
      | Ok(ty) -> f": {format_ty(fmt, ty)}"
      | Err(_) -> ""

    // some blocks need an additional indent here
    let efmt = match expr
      | ast:Expr:Match(_, _, _) -> inc(fmt)
      | ast:Expr:Pipe(_, _, _, true) -> inc(fmt)
      | _ -> fmt

    f"mut {name}{ty} = {format_expr(efmt, expr)}"
  | ast:Expr:Assign(_, lhs, rhs) ->
    f"{format_expr(fmt, lhs)} = {format_expr(fmt, rhs)}"
  | ast:Expr:Match(_, expr, arms) ->
    let arms = string:join(list:map(arms, format_arm(fmt)), newline())
    f"match {format_expr(fmt, expr)}{newline()}{arms}"
  | ast:Expr:Closure(_, args, body) ->
    let args = string:join(list:map(args, format_argument(fmt)), ", ")
    f"|{args}| {format_expr(fmt, body)}"
  | ast:Expr:Return(_, expr) ->
    match expr
    | Ok(expr) -> f"return {format_expr(fmt, expr)}"
    | Err(_) -> "return"
  | ast:Expr:Panic(_, message) ->
    match message
    | Ok(message) -> f"panic {quote()}{message}{quote()}"
    | Err(_) -> "panic"
  | ast:Expr:Assert(_, expr, message) ->
    match message
    | Ok(message) -> f"assert {format_expr(fmt, expr)} {quote()}{message}{quote()}"
    | Err(_) -> f"assert {format_expr(fmt, expr)}"
  | ast:Expr:Try(_, expr) -> 
    f"{format_expr(fmt, expr)}?"

fn format_arm(
  fmt: Formatter
  arm: ast:Arm
) -> str
  let pat = format_pat(fmt, arm.pat)
  let expr = format_expr(fmt, arm.body)
  indent_line(fmt, f"| {pat} -> {expr}")

fn format_pat(
  fmt: Formatter
  pat: ast:Pat
) -> str
  match pat
  | ast:Pat:Wild(_) -> "_"
  | ast:Pat:Bind(_, name) -> name
  | ast:Pat:Bool(_, value) -> match value
    | true -> "true"
    | false -> "false"
  | ast:Pat:Tuple(_, pats) ->
    let s = f"{string:join(list:map(pats, format_pat(inc_tuple_lvl(fmt))), ", ")}"
    match fmt.tuple_lvl == 0
    | false -> f"({s})"
    | true -> s
  | ast:Pat:Variant(_, path, pats) ->
    let pats = match pats
      | [] -> ""
      | _ ->
        let s = string:join(list:map(pats, format_pat(fmt)), ", ")
        f"({s})"

    f"{format_path(fmt, path)}{pats}"
  | ast:Pat:List(_, head, tail) ->
    let s = list:map(head, format_pat(fmt))
    let s = match tail
      | Ok(pat) -> list:append(s, f"..{format_pat(fmt, pat)}")
      | Err(_) -> s
    f"[{string:join(s, ", ")}]"

/// TODO
fn format_argument(
  fmt: Formatter
  arg: ast:Argument
) -> str
  let attrs = format_attrs(fmt, arg.attrs)
  let name = arg.name
  let ty = match arg.ty
    | Ok(ty) -> f": {format_ty(fmt, ty)}"
    | Err(_) -> ""

  f"{attrs}{name}{ty}"

fn format_call_arg(
  fmt: Formatter
  arg: ast:CallArgument
) -> str
  match arg
  | ast:CallArgument:Positional(expr) -> match expr
    | Ok(expr) -> format_expr(fmt, expr)
    | Err(_) -> "_"
  | ast:CallArgument:Named(expr, name) -> match expr
    | Ok(expr) -> f"{name}: {format_expr(fmt, expr)}"
    | Err(_) -> f"{name}: _"

fn format_bin_op(
  fmt: Formatter
  op:  ast:BinOp
) -> str
  match op
  | ast:BinOp:Add -> "+"
  | ast:BinOp:Sub -> "-"
  | ast:BinOp:Mul -> "*"
  | ast:BinOp:Div -> "/"
  | ast:BinOp:Mod -> "%"
  | ast:BinOp:And -> "&&"
  | ast:BinOp:Or -> "||"
  | ast:BinOp:Eq -> "=="
  | ast:BinOp:Ne -> "!="
  | ast:BinOp:Lt -> "<"
  | ast:BinOp:Le -> "<="
  | ast:BinOp:Gt -> ">"
  | ast:BinOp:Ge -> ">="

fn format_un_op(
  fmt: Formatter
  op:  ast:UnOp
) -> str
  match op
  | ast:UnOp:Ref -> "&"
  | ast:UnOp:Deref -> "*"
  | ast:UnOp:Not -> "!"
  | ast:UnOp:Neg -> "-"
