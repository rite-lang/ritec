//! Extend array type with helper functions for dynamic data allocation.

import array:Array

import result:Result

/// A dynamically sized array.
pub type Vec<'a>(
  length: int
  data:   Array<'a>
)

/// Create a new empty vec.
pub fn new() -> Vec<'a>
  Vec(0, array:empty())

/// Optionally extend the capacity of the array.
pub fn push(vec: Vec<'a>, item: 'a) -> Vec<'a>
  let vec = match cap(vec) == vec.length
    | true -> grow(vec, item)
    | false -> vec

  Vec(
    length: vec.length + 1
    data: array:set(vec.data, vec.length, item)
  )

fn cap(vec: Vec<'a>) -> int
  array:length(vec.data)

fn grow(vec: Vec<'a>, item: 'a) -> Vec<'a>
  let new_cap = match cap(vec) == 0
    | true -> 1
    | false -> cap(vec) * 2

  Vec(
    length: vec.length
    data: array:extend(vec.data, new_cap, item)
  )
  

/// Retrieve element and mutate the vec
pub fn pop(vec: Vec<'a>) -> Result<'a * Vec<'a>, void>
  match vec.length == 0
  | true  -> Err(void)
  | false ->
    let item = array:get(vec.data, vec.length - 1)?

    Ok((item, Vec(vec.length - 1, vec.data)))

/// Access element at index.
pub fn get(vec: Vec<'a>, index: int) -> Result<'a, void>
  array:get(vec.data, index)

/// Set element at index.
pub fn set(vec: Vec<'a>, index: int, item: 'a) -> Vec<'a>
  Vec(vec.length, array:set(vec.data, index, item))

pub fn length(vec: Vec<'a>) -> int
  vec.length
