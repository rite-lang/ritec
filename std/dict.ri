//! Dictionary type and utilities.

import result:Result

/// A dictionary type that maps keys to values.
#[language("dict:Dict")]
pub type Dict<'k, 'v>

/// Create a new empty dictionary.
#[language("dict:new")]
pub fn new() -> Dict<'k, 'v>
  panic "dict:new builtin not implemented"

/// Get the length of a dictionary.
#[language("dict:length")]
pub fn length(dict: Dict<'k, 'v>) -> int
  panic "dict:length builtin not implemented"

/// Get the value associated with a key in a dictionary.
#[language("dict:get")]
pub fn get(dict: Dict<'k, 'v>, key: 'k) -> Result<'v, void>
  panic "dict:get builtin not implemented"

/// Check if a key exists in a dictionary.
pub fn has(dict: Dict<'k, 'v>, key: 'k) -> bool
  get(dict, key) |> result:is_ok

/// Insert a key-value pair into a dictionary.
#[language("dict:insert")]
pub fn insert(
  dict: Dict<'k, 'v>
  key: 'k
  value: 'v
) -> Dict<'k, 'v>
  panic "dict:insert builtin not implemented"

/// Remove a key-value pair from a dictionary.
#[language("dict:remove")]
pub fn remove(dict: Dict<'k, 'v>, key: 'k) -> Dict<'k, 'v>
  panic "dict:remove builtin not implemented"

/// Get the pairs of keys and values in a dictionary.
#[language("dict:pairs")]
pub fn pairs(dict: Dict<'k, 'v>) -> ['k * 'v]
  panic "dict:pairs builtin not implemented"

/// Create a dictionary from a list of key-value pairs.
pub fn from_pairs(pairs: ['k * 'v]) -> Dict<'k, 'v>
  pairs, new() |> list:fold(|pair, acc|
    let key, value = pair
    insert(acc, key, value)
  )

/// Get the keys of a dictionary.
#[language("dict:keys")]
pub fn keys(dict: Dict<'k, 'v>) -> ['k]
  let map = |pair|
    let key, _ = pair
    key

  pairs(dict) |> list:map(map)

/// Get the values of a dictionary.
#[language("dict:values")]
pub fn values(dict: Dict<'k, 'v>) -> ['v]
  let map = |pair|
    let _, value = pair
    value

  pairs(dict) |> list:map(map)
