//! String utilities.

/// Concatenate two strings.
#[language("string:concat")]
pub fn concat(a: str, b: str) -> str
  bytes(a), bytes(b) |> std:array:concat |> from_bytes

/// Compute the length of a string.
#[language("string:length")]
pub fn length(s: str) -> int
  bytes(s) |> std:array:length

/// Slice a string.
#[language("string:slice")]
pub fn slice(s: str, start: int, end: int) -> str
  bytes(s) |> std:array:slice(start, end) |> from_bytes

/// Convert a string to a list of graphemes.
///
/// A grapheme is a single unit of text that is displayed as a single character.
#[language("string:graphemes")]
pub fn graphemes(s: str) -> [str]
  panic "string_graphemes builtin not implemented"

/// Split a string into substrings using a separator.
#[language("string:split")]
pub fn split(s: str, sep: str) -> [str]
  panic "string:split builtin not implemented"

/// Check if all characters in a string are whitespace.
#[language("string:is_whitespace")]
pub fn is_whitespace(s: str) -> bool
  panic "string:is_whitespace builtin not implemented"

/// Check if all characters in a string are alphabetic.
#[language("string:is_alphabetic")]
pub fn is_alphabetic(s: str) -> bool
  panic "string:is_alphabetic builtin not implemented"

/// Check if all characters in a string are numeric.
#[language("string:is_numeric")]
pub fn is_numeric(s: str) -> bool
  panic "string:is_numeric builtin not implemented"

/// Check if all characters in a string are alphanumeric.
pub fn is_alphanumeric(s: str) -> bool
  is_alphabetic(s) || is_numeric(s)

/// Check if all characters in a string are lowercase.
#[language("string:is_lowercase")]
pub fn is_lowercase(s: str) -> bool
  panic "string:is_lowercase builtin not implemented"

/// Check if all characters in a string are uppercase.
#[language("string:is_uppercase")]
pub fn is_uppercase(s: str) -> bool
  panic "string:is_uppercase builtin not implemented"

/// Split a string into lines.
pub fn lines(s: str) -> [str]
  let newline = array:from_list([10]) |> from_bytes
  split(s, newline)

/// Get the array of bytes representing a string.
#[language("string:bytes")]
pub fn bytes(a: str) -> array:Array<u8>
  panic "string:bytes builtin not implemented"

/// Create a string from a array of bytes.
#[language("string:from_bytes")]
pub fn from_bytes(a: array:Array<u8>) -> str
  panic "string:from_bytes builtin not implemented"

/// Repeat a string n times.
pub fn repeat(s: str, n: int) -> str
  match n > 0
  | true -> s |> concat(repeat(s, n - 1))
  | false -> ""

/// Join a list of strings with a separator.
pub fn join(xs: [str], sep: str) -> str
  match xs
  | [] -> ""
  | [s] -> s
  | [s, ..rest] -> s |> concat(sep) |> concat(join(rest, sep))

/// Check if a string starts with a prefix.
pub fn starts_with(s: str, prefix: str) -> bool
  prefix == slice(s, 0, length(prefix))

/// Check if a string ends with a suffix.s
pub fn ends_with(s: str, suffix: str) -> bool
  let len = length(s)
  suffix == slice(s, len - length(suffix), len)
