import result:Result

pub fn length(xs: ['a]) -> int
  match xs
  | [_, ..xs] -> 1 + length(xs)
  | [] -> 0

pub fn concat(xs: ['a], ys: ['a]) -> ['a]
  match xs
  | [x, ..xs] -> [x, ..concat(xs, ys)]
  | [] -> ys

pub fn reverse(xs: ['a]) -> ['a]
  match xs
  | [x, ..xs] -> concat(reverse(xs), [x])
  | [] -> []

pub fn map(f: fn('a) -> 'b, xs: ['a]) -> ['b]
  match xs
  | [x, ..xs] -> [f(x), ..map(f, xs)]
  | [] -> []

pub fn try_map(
  f: fn('a) -> Result<'b, 'c>
  xs: ['a]
) -> Result<['b], 'c>
  match xs
  | [x, ..xs] ->
    match f(x)
    | Err(e) -> Err(e)
    | Ok(y) -> try_map(f, xs) |> result:map(|ys| [y, ..ys])
  | [] -> Ok([])

pub fn filter_map(
  f: fn('a) -> Result<'b, 'e>
  xs: ['a]
) -> ['b]
  match xs
  | [x, ..xs] ->
    match f(x)
    | Err(_) -> filter_map(f, xs)
    | Ok(y) -> [y, ..filter_map(f, xs)]
  | [] -> []

pub fn filter(f: fn('a) -> bool, xs: ['a]) -> ['a]
  match xs
  | [x, ..xs] ->
    match f(x)
    | true -> [x, ..filter(f, xs)]
    | false -> filter(f, xs)
  | [] -> []
